// Generated by view binder compiler. Do not edit!
package com.example.proyectomanzanares.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.proyectomanzanares.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class EditMainXmlBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button buttonSaveChanges;

  @NonNull
  public final Button buttonSearchOrder;

  @NonNull
  public final EditText editTextCustomerID;

  @NonNull
  public final EditText editTextOrderDate;

  @NonNull
  public final EditText editTextOrderID;

  @NonNull
  public final EditText editTextProductID;

  @NonNull
  public final EditText editTextQuantity;

  @NonNull
  public final EditText editTextUnitPrice;

  private EditMainXmlBinding(@NonNull RelativeLayout rootView, @NonNull Button buttonSaveChanges,
      @NonNull Button buttonSearchOrder, @NonNull EditText editTextCustomerID,
      @NonNull EditText editTextOrderDate, @NonNull EditText editTextOrderID,
      @NonNull EditText editTextProductID, @NonNull EditText editTextQuantity,
      @NonNull EditText editTextUnitPrice) {
    this.rootView = rootView;
    this.buttonSaveChanges = buttonSaveChanges;
    this.buttonSearchOrder = buttonSearchOrder;
    this.editTextCustomerID = editTextCustomerID;
    this.editTextOrderDate = editTextOrderDate;
    this.editTextOrderID = editTextOrderID;
    this.editTextProductID = editTextProductID;
    this.editTextQuantity = editTextQuantity;
    this.editTextUnitPrice = editTextUnitPrice;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static EditMainXmlBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static EditMainXmlBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.edit_main_xml, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static EditMainXmlBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonSaveChanges;
      Button buttonSaveChanges = ViewBindings.findChildViewById(rootView, id);
      if (buttonSaveChanges == null) {
        break missingId;
      }

      id = R.id.buttonSearchOrder;
      Button buttonSearchOrder = ViewBindings.findChildViewById(rootView, id);
      if (buttonSearchOrder == null) {
        break missingId;
      }

      id = R.id.editTextCustomerID;
      EditText editTextCustomerID = ViewBindings.findChildViewById(rootView, id);
      if (editTextCustomerID == null) {
        break missingId;
      }

      id = R.id.editTextOrderDate;
      EditText editTextOrderDate = ViewBindings.findChildViewById(rootView, id);
      if (editTextOrderDate == null) {
        break missingId;
      }

      id = R.id.editTextOrderID;
      EditText editTextOrderID = ViewBindings.findChildViewById(rootView, id);
      if (editTextOrderID == null) {
        break missingId;
      }

      id = R.id.editTextProductID;
      EditText editTextProductID = ViewBindings.findChildViewById(rootView, id);
      if (editTextProductID == null) {
        break missingId;
      }

      id = R.id.editTextQuantity;
      EditText editTextQuantity = ViewBindings.findChildViewById(rootView, id);
      if (editTextQuantity == null) {
        break missingId;
      }

      id = R.id.editTextUnitPrice;
      EditText editTextUnitPrice = ViewBindings.findChildViewById(rootView, id);
      if (editTextUnitPrice == null) {
        break missingId;
      }

      return new EditMainXmlBinding((RelativeLayout) rootView, buttonSaveChanges, buttonSearchOrder,
          editTextCustomerID, editTextOrderDate, editTextOrderID, editTextProductID,
          editTextQuantity, editTextUnitPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
